/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */ /*** * @author coral
 */

import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.JOptionPane;

public class FormActualizar extends javax.swing.JFrame {

    /**
     * Creates new form FormActualizar
     */

    private UserCRUD crud;

    public FormActualizar() {
        initComponents();
        crud = new UserCRUD();//Se instancia el objeto crud" hasta que se ejecuta el formulario
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtid = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btn_act_nombre = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnbuscarporid = new javax.swing.JButton();
        btn_act_correo = new javax.swing.JButton();
        btn_act_contrasena = new javax.swing.JButton();
        txtnombre = new javax.swing.JTextField();
        txtcorreo = new javax.swing.JTextField();
        txtcontrasena = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Actualizar Usuario");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Nombre:");

        txtid.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        btn_act_nombre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btn_act_nombre.setText("Actualizar");
        btn_act_nombre.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btn_act_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_act_nombreActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "id", "Nombre", "Correo", "Contraseña"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Correo:");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Contraseña:");

        btnbuscarporid.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnbuscarporid.setText("Buscar por id");
        btnbuscarporid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscarporidActionPerformed(evt);
            }
        });

        btn_act_correo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btn_act_correo.setText("Actualizar");
        btn_act_correo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_act_correoActionPerformed(evt);
            }
        });

        btn_act_contrasena.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btn_act_contrasena.setText("Actualizar");
        btn_act_contrasena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_act_contrasenaActionPerformed(evt);
            }
        });

        txtnombre.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        txtcorreo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        txtcontrasena.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(5, 5, 5)
                                .addComponent(txtcontrasena, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtnombre, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                                    .addComponent(txtcorreo))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_act_nombre)
                            .addComponent(btn_act_correo)
                            .addComponent(btn_act_contrasena)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnbuscarporid))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnbuscarporid))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_act_nombre))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtcorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_act_correo))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtcontrasena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_act_contrasena))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnbuscarporidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscarporidActionPerformed
        // TODO add your handling code here:
        //1. Obtener el valor del text, en donde se coloca el id para realziar consultas
        String idtext=txtid.getText();
        
        //2. Se valida que no exista vacío
        
        if(idtext.isEmpty()){
            JOptionPane.showMessageDialog(this, "El campo id es obligatorio", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //3. Búsqueda, llenado de la tabla
        try{
            
            int id=Integer.parseInt(idtext);
            ResultSet rs = crud.buscarporid(id);
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            modelo.setRowCount(0);//Limpiar para ingresa otro valor
            
            if(rs.next()){
                modelo.addRow(new Object[]{rs.getInt("id_usuario"), rs.getString("nombre"), rs.getString("correo"), rs.getString("contrasena") });
            }
       }
        
        catch(SQLException e){
            
            System.out.println("Error al llenar la tabla"+e.getMessage());
        
        }
     
    }//GEN-LAST:event_btnbuscarporidActionPerformed
//Fin botón buscar por id
    
    private void limpiarcampos(){
        
        txtnombre.setText("");
        txtcorreo.setText("");
        txtcontrasena.setText("");
           
    }  
    
    private void btn_act_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_act_nombreActionPerformed
        // TODO add your handling code here:
        //1. Se guarda en la variable lo que el usuario a ingresado
        
        String nom=txtnombre.getText();
        String id=txtid.getText();
        
        //2. Se valida que no existan vacíos
        
        if(nom.isEmpty()){
            
            JOptionPane.showMessageDialog(this, "El campo es obligatorio", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //3. El usuario ingresa dato para actualizar el campo de nombre
        
        UserCRUD crud = new UserCRUD();
     
        
        //4. Se pregunta al usuario si desea actualizar el campo
        int respuesta = JOptionPane.showConfirmDialog(
            null, 
            "¿Estás seguro de que quieres actualizar el nombre?", 
            "Confirmar actualización", 
            JOptionPane.YES_NO_OPTION
        );
        
        if (respuesta == JOptionPane.YES_OPTION){
            
                //5. Se muestra el status de la actualización/UPDATE
                
            //Si selecciona la opción "YES/SI" se hace la actualización 
            
            boolean status=crud.actualizar_nombre_usuario(nom, id);
            if(status){
                
            
       JOptionPane.showMessageDialog(this,"Nombre del usuario actualizado", "Éxito",JOptionPane.INFORMATION_MESSAGE);
            
        }
            
        }
            
        else
        {       
            //En caso contrario muestra el siguiente mensaje:
            JOptionPane.showMessageDialog(this,"Nombre del usuario no actualizado", "No actualizado",JOptionPane.INFORMATION_MESSAGE);  
        }
       limpiarcampos();
      
    
    }//GEN-LAST:event_btn_act_nombreActionPerformed

    //Fin del botón para actualizar el nombre 
    
    private void btn_act_correoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_act_correoActionPerformed
        // TODO add your handling code here:
        //1. Se guarda en la variable lo que el usuario a ingresado
        
        String cor=txtcorreo.getText();
        String id=txtid.getText();
        
        //2. Se valida que no existan vacíos
        
        if(cor.isEmpty()){
            
            JOptionPane.showMessageDialog(this, "El campo es obligatorio", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //3. El usuario ingresa dato para actualizar el campo de correo
        
        UserCRUD crud = new UserCRUD();
     
        //4. Se pregunta al usuario si desea actualizar el campo
        
        int respuesta = JOptionPane.showConfirmDialog(
            null, 
            "¿Estás seguro de que quieres actualizar el correo?", 
            "Confirmar actualización", 
            JOptionPane.YES_NO_OPTION
        );
        
        if (respuesta == JOptionPane.YES_OPTION){
            
                //5. Se muestra el status de la actualización/UPDATE
                
            //Si selecciona la opción "YES/SI" se hace la actualización 
            
            boolean status=crud.actualizar_correo_usuario(cor, id);
       
            
            if(status){
       JOptionPane.showMessageDialog(this,"Correo del usuario actualizado", "Éxito",JOptionPane.INFORMATION_MESSAGE);
            
        }
            
        }
            
        else
        {       
            //En caso contrario muestra el siguiente mensaje:
            JOptionPane.showMessageDialog(this,"Correo del usuario no actualizado",  "No actualizado",JOptionPane.INFORMATION_MESSAGE);  
        }
       limpiarcampos();
      
        
    }//GEN-LAST:event_btn_act_correoActionPerformed

    //Fin del botón para actualizar el correo
    
    private void btn_act_contrasenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_act_contrasenaActionPerformed
        // TODO add your handling code here:
        //1. Se guarda en la variable lo que el usuario a ingresado
        
        String con=txtcontrasena.getText();
        String id=txtid.getText();
        
        //2. Se valida que no existan vacíos
        
        if(con.isEmpty()){
            
            JOptionPane.showMessageDialog(this, "El campo es obligatorio", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        
        //3. El usuario ingresa dato para actualizar el campo de contrasena
        
        UserCRUD crud = new UserCRUD();
     
        //4. Se pregunta al usuario si desea actualizar el campo
        
        int respuesta = JOptionPane.showConfirmDialog(
            null, 
            "¿Estás seguro de que quieres actualizar la contraseña?", 
            "Confirmar actualización", 
            JOptionPane.YES_NO_OPTION
        );
        
        if (respuesta == JOptionPane.YES_OPTION){
            
                //5. Se muestra el status de la actualización/UPDATE
                
            //Si selecciona la opción "YES/SI" se hace la actualización, tomando en cuenta los parámetros de contraseña y id 
            
            boolean status=crud.actualizar_contrasena_usuario(con, id);
       
            
            if(status){
       JOptionPane.showMessageDialog(this,"Contraseña del usuario actualizada", "Éxito",JOptionPane.INFORMATION_MESSAGE);
            
        }
            
        }
            
        else
        {       
            //En caso contrario muestra el siguiente mensaje:
            JOptionPane.showMessageDialog(this,"Contraseña del usuario no actualizada",  "No actualizado",JOptionPane.INFORMATION_MESSAGE);  
        }
       limpiarcampos();
      
    }//GEN-LAST:event_btn_act_contrasenaActionPerformed

    //Fin del botón para actualizar la contraseña

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormActualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormActualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormActualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormActualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormActualizar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_act_contrasena;
    private javax.swing.JButton btn_act_correo;
    private javax.swing.JButton btn_act_nombre;
    private javax.swing.JButton btnbuscarporid;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtcontrasena;
    private javax.swing.JTextField txtcorreo;
    private javax.swing.JTextField txtid;
    private javax.swing.JTextField txtnombre;
    // End of variables declaration//GEN-END:variables
}
